{"version":3,"sources":["of-type.ts"],"names":["ofType","types","reducer","undefined","Error","t","Array","isArray","map","item","a","type","state","action","some","p"],"mappings":";;;;;;;AAMA;;;;;;;;;;;AAWO,MAAMA,MAAM,GAAG,CACpBC,KADoB,EAEpBC,OAFoB,KAGF;AAClB,MAAID,KAAK,KAAK,IAAV,IAAkBA,KAAK,KAAKE,SAAhC,EAA2C;AACzC,UAAM,IAAIC,KAAJ,CACJ,gGADI,CAAN;AAGD;;AACD,QAAMC,CAAC,GAAG,CAACC,KAAK,CAACC,OAAN,CAAcN,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAAhC,EAAyCO,GAAzC,CAA6CC,IAAI,IAAI;AAC7D,QAAI,OAAOA,IAAP,KAAgB,QAApB,EAA8B;AAC5B,aAAQC,CAAD,IAAmBA,CAAC,CAACC,IAAF,KAAWF,IAArC;AACD;;AACD,WAAOA,IAAP;AACD,GALS,CAAV;AAMA,SAAO,CAACG,KAAD,EAAWC,MAAX,KAAyB;AAC9B,QAAIR,CAAC,CAACS,IAAF,CAAOC,CAAC,IAAIA,CAAC,CAACF,MAAD,CAAb,CAAJ,EAA4B;AAC1B,aAAOX,OAAO,CAACU,KAAD,EAAQC,MAAR,CAAd;AACD;;AACD,WAAOD,KAAP;AACD,GALD;AAMD,CArBM","sourcesContent":["import { AnyAction, Reducer } from './redux';\n\nexport type ActionPredicate<NA extends A, A extends AnyAction = AnyAction> =\n  | ((action: A) => action is NA)\n  | NA['type'];\n\n/**\n * Given a type predicate and a reducer returns a reducer that\n * only invokes the given reducer if the action matches the predicate.\n *\n * Given a string the string is compared to the type field of actions.\n * Given a function the function is passed the action and should return true or false.\n * Given an array of string or functions matches the action if any condition would be met.\n *\n * @param types either a string, function, or array of either\n * @param reducer the reducer to invoke when the type is matched.\n */\nexport const ofType = <S, NA extends A, A extends AnyAction = AnyAction>(\n  types: ActionPredicate<NA, A> | Array<ActionPredicate<NA, A>>,\n  reducer: Reducer<S, NA>\n): Reducer<S, A> => {\n  if (types === null || types === undefined) {\n    throw new Error(\n      'please specify a type string, action predicate, or an array of type string or action predicate'\n    );\n  }\n  const t = (Array.isArray(types) ? types : [types]).map(item => {\n    if (typeof item === 'string') {\n      return (a: A): a is NA => a.type === item;\n    }\n    return item;\n  });\n  return (state: S, action: A) => {\n    if (t.some(p => p(action))) {\n      return reducer(state, action as NA);\n    }\n    return state!;\n  };\n};\n"],"file":"of-type.js"}