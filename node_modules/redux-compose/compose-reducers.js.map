{"version":3,"sources":["compose-reducers.ts"],"names":["composeReducers","reducers","s","action","reduce","state","reducer"],"mappings":";;;;;;;AAEA;;;;;;;;;;AAUO,MAAMA,eAAe,GAAG,CAC7B,GAAGC,QAD0B,KAEX,CAACC,CAAD,EAAIC,MAAJ,KAAeF,QAAQ,CAACG,MAAT,CAAgB,CAACC,KAAD,EAAQC,OAAR,KAAoBA,OAAO,CAACD,KAAD,EAAQF,MAAR,CAA3C,EAA4DD,CAA5D,CAF5B","sourcesContent":["import { AnyAction, Reducer } from './redux';\n\n/**\n * Sequentially combines reducers to produce a composed reducer.\n *\n * The given reducers are invoked first - to - last with\n * the resulting state of each reducer passed as the state\n * into the next reducer.\n *\n * @param reducers An Array of Reducers, called sequentially\n * @returns a reducer that sequentially invokes the given reducers.\n */\nexport const composeReducers = <S, A extends AnyAction = AnyAction>(\n  ...reducers: Array<Reducer<S, A>>\n): Reducer<S, A> => (s, action) => reducers.reduce((state, reducer) => reducer(state, action), s)!;\n"],"file":"compose-reducers.js"}