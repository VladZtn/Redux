import { AnyAction, Reducer } from './redux';
export declare type CF<V, A extends AnyAction> = V | ((action: A) => V);
/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */
export declare function forPath<S, K1 extends keyof S, A extends AnyAction = AnyAction>(path: [CF<K1, A>], reducer: Reducer<S[K1], A>): Reducer<S, A>;
/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */
export declare function forPath<S, K1 extends keyof S, K2 extends keyof S[K1], A extends AnyAction = AnyAction>(path: [CF<K1, A>, CF<K2, A>], reducer: Reducer<S[K1][K2], A>): Reducer<S, A>;
/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */
export declare function forPath<S, K1 extends keyof S, K2 extends keyof S[K1], K3 extends keyof S[K1][K2], A extends AnyAction = AnyAction>(path: [CF<K1, A>, CF<K2, A>, CF<K3, A>], reducer: Reducer<S[K1][K2][K3], A>): Reducer<S, A>;
/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */
export declare function forPath<S, K1 extends keyof S, K2 extends keyof S[K1], K3 extends keyof S[K1][K2], K4 extends keyof S[K1][K2][K3], A extends AnyAction = AnyAction>(path: [CF<K1, A>, CF<K2, A>, CF<K3, A>, CF<K4, A>], reducer: Reducer<S[K1][K2][K3][K4], A>): Reducer<S, A>;
/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */
export declare function forPath<S, K1 extends keyof S, K2 extends keyof S[K1], K3 extends keyof S[K1][K2], K4 extends keyof S[K1][K2][K3], K5 extends keyof S[K1][K2][K3][K4], A extends AnyAction = AnyAction>(path: [CF<K1, A>, CF<K2, A>, CF<K3, A>, CF<K4, A>, CF<K5, A>], reducer: Reducer<S[K1][K2][K3][K4][K5], A>): Reducer<S, A>;
/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */
export declare function forPath<S, K1 extends keyof S, K2 extends keyof S[K1], K3 extends keyof S[K1][K2], K4 extends keyof S[K1][K2][K3], K5 extends keyof S[K1][K2][K3][K4], K6 extends keyof S[K1][K2][K3][K4][K5], A extends AnyAction = AnyAction>(path: [CF<K1, A>, CF<K2, A>, CF<K3, A>, CF<K4, A>, CF<K5, A>, CF<K6, A>], reducer: Reducer<S[K1][K2][K3][K4][K5][K6], A>): Reducer<S, A>;
/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */
export declare function forPath<S, K1 extends keyof S, K2 extends keyof S[K1], K3 extends keyof S[K1][K2], K4 extends keyof S[K1][K2][K3], K5 extends keyof S[K1][K2][K3][K4], K6 extends keyof S[K1][K2][K3][K4][K5], K7 extends keyof S[K1][K2][K3][K4][K5][K6], A extends AnyAction = AnyAction>(path: [CF<K1, A>, CF<K2, A>, CF<K3, A>, CF<K4, A>, CF<K5, A>, CF<K6, A>, CF<K7, A>], reducer: Reducer<S[K1][K2][K3][K4][K5][K6][K7], A>): Reducer<S, A>;
/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */
export declare function forPath<S, K1 extends keyof S, K2 extends keyof S[K1], K3 extends keyof S[K1][K2], K4 extends keyof S[K1][K2][K3], K5 extends keyof S[K1][K2][K3][K4], K6 extends keyof S[K1][K2][K3][K4][K5], K7 extends keyof S[K1][K2][K3][K4][K5][K6], K8 extends keyof S[K1][K2][K3][K4][K5][K6][K7], A extends AnyAction = AnyAction>(path: [CF<K1, A>, CF<K2, A>, CF<K3, A>, CF<K4, A>, CF<K5, A>, CF<K6, A>, CF<K7, A>, CF<K8, A>], reducer: Reducer<S[K1][K2][K3][K4][K5][K6][K7][K8], A>): Reducer<S, A>;
/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */
export declare function forPath<S, K1 extends keyof S, K2 extends keyof S[K1], K3 extends keyof S[K1][K2], K4 extends keyof S[K1][K2][K3], K5 extends keyof S[K1][K2][K3][K4], K6 extends keyof S[K1][K2][K3][K4][K5], K7 extends keyof S[K1][K2][K3][K4][K5][K6], K8 extends keyof S[K1][K2][K3][K4][K5][K6][K7], K9 extends keyof S[K1][K2][K3][K4][K5][K6][K7][K8], A extends AnyAction = AnyAction>(path: [CF<K1, A>, CF<K2, A>, CF<K3, A>, CF<K4, A>, CF<K5, A>, CF<K6, A>, CF<K7, A>, CF<K8, A>, CF<K9, A>], reducer: Reducer<S[K1][K2][K3][K4][K5][K6][K7][K8][K9], A>): Reducer<S, A>;
/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */
export declare function forPath<S, K1 extends keyof S, K2 extends keyof S[K1], K3 extends keyof S[K1][K2], K4 extends keyof S[K1][K2][K3], K5 extends keyof S[K1][K2][K3][K4], K6 extends keyof S[K1][K2][K3][K4][K5], K7 extends keyof S[K1][K2][K3][K4][K5][K6], K8 extends keyof S[K1][K2][K3][K4][K5][K6][K7], K9 extends keyof S[K1][K2][K3][K4][K5][K6][K7][K8], K10 extends keyof S[K1][K2][K3][K4][K5][K6][K7][K8][K9], A extends AnyAction = AnyAction>(path: [CF<K1, A>, CF<K2, A>, CF<K3, A>, CF<K4, A>, CF<K5, A>, CF<K6, A>, CF<K7, A>, CF<K8, A>, CF<K9, A>, CF<K10, A>], reducer: Reducer<S[K1][K2][K3][K4][K5][K6][K7][K8][K9][K10], A>): Reducer<S, A>;
