"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ofType = void 0;

/**
 * Given a type predicate and a reducer returns a reducer that
 * only invokes the given reducer if the action matches the predicate.
 *
 * Given a string the string is compared to the type field of actions.
 * Given a function the function is passed the action and should return true or false.
 * Given an array of string or functions matches the action if any condition would be met.
 *
 * @param types either a string, function, or array of either
 * @param reducer the reducer to invoke when the type is matched.
 */
const ofType = (types, reducer) => {
  if (types === null || types === undefined) {
    throw new Error('please specify a type string, action predicate, or an array of type string or action predicate');
  }

  const t = (Array.isArray(types) ? types : [types]).map(item => {
    if (typeof item === 'string') {
      return a => a.type === item;
    }

    return item;
  });
  return (state, action) => {
    if (t.some(p => p(action))) {
      return reducer(state, action);
    }

    return state;
  };
};

exports.ofType = ofType;
//# sourceMappingURL=of-type.js.map
