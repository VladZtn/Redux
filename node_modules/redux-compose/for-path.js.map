{"version":3,"sources":["for-path.ts"],"names":["forPath","path","reducer","state","action","pathParts","map","part","states","subState","reduce","s","undefined","push","v","reduceRight","n","pop","Array","isArray","p","Number","length","slice"],"mappings":";;;;;;;AAIA;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;AAkBA;;;;;;;;;;;;;AAmBA;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;AAwBA;;;;;;;;;;;;;AAyBA;;;;;;;;;;;;;AA0BA;;;;;;;;;;;;;AA2BA;;;;;;;;;;;;;AAsCA;;;;;;;;;;;;;AAwCA;;;;;;;;;;;;AAYO,SAASA,OAAT,CACLC,IADK,EAELC,OAFK,EAGU;AACf,SAAO,CAACC,KAAD,EAAuBC,MAAvB,KAAqC;AAC1C,UAAMC,SAAS,GAAGJ,IAAI,CAACK,GAAL,CAASC,IAAI,IAAK,OAAOA,IAAP,KAAgB,UAAhB,GAA6BA,IAAI,CAACH,MAAD,CAAjC,GAA4CG,IAA9D,CAAlB;AACA,UAAMC,MAAiB,GAAG,EAA1B;AACA,UAAMC,QAAQ,GAAGJ,SAAS,CAACK,MAAV,CAAiB,CAACC,CAAD,EAASJ,IAAT,KAAkB;AAClD;AACA;AACA,UAAII,CAAC,KAAKC,SAAN,IAAmBD,CAAC,KAAK,IAA7B,EAAmC;AACjC;AACAA,QAAAA,CAAC,GAAG,OAAOJ,IAAP,KAAgB,QAAhB,GAA2B,EAA3B,GAAgC,EAApC;AACD;;AACDC,MAAAA,MAAM,CAACK,IAAP,CAAYF,CAAZ;AACA,aAAOA,CAAC,CAACJ,IAAD,CAAR;AACD,KATgB,EASdJ,KATc,CAAjB;AAUA,UAAMW,CAAC,GAAGZ,OAAO,CAACO,QAAD,EAAWL,MAAX,CAAjB,CAb0C,CAc1C;AACA;;AACA,QAAID,KAAK,KAAKS,SAAV,IAAuBE,CAAC,KAAKL,QAAjC,EAA2C;AACzC,aAAON,KAAP;AACD,KAlByC,CAmB1C;;;AACA,WAAOE,SAAS,CAACU,WAAV,CAAsB,CAACJ,CAAD,EAAIJ,IAAJ,KAAa;AACxC;AACA,YAAMS,CAAC,GAAGR,MAAM,CAACS,GAAP,EAAV;;AACA,UAAIC,KAAK,CAACC,OAAN,CAAcH,CAAd,CAAJ,EAAsB;AACpB,cAAMI,CAAC,GAAGC,MAAM,CAACd,IAAD,CAAhB,CADoB,CAEpB;AACA;AACA;;AACA,YAAIS,CAAC,CAACM,MAAF,GAAWF,CAAf,EAAkB;AAChB,iBAAO,CAAC,GAAGJ,CAAJ,EAAO,GAAGE,KAAK,CAACE,CAAC,GAAGJ,CAAC,CAACM,MAAP,CAAf,EAA+BX,CAA/B,CAAP;AACD;;AACD,eAAO,CAAC,GAAGK,CAAC,CAACO,KAAF,CAAQ,CAAR,EAAWH,CAAX,CAAJ,EAAmBT,CAAnB,EAAsB,GAAGK,CAAC,CAACO,KAAF,CAAQH,CAAC,GAAG,CAAZ,CAAzB,CAAP;AACD;;AACD,aAAO,EACL,GAAGJ,CADE;AAEL,SAACT,IAAD,GAAQI;AAFH,OAAP;AAID,KAjBM,EAiBJG,CAjBI,CAAP;AAkBD,GAtCD;AAuCD","sourcesContent":["import { AnyAction, Reducer } from './redux';\n\nexport type CF<V, A extends AnyAction> = V | ((action: A) => V);\n\n/**\n * Given a path expressed as an array of strings, numbers, or functions, and a reducer\n * returns a reducer which applies the given reducer to the state at the given path.\n *\n * In the event that some part of the state is undefined forPath will try to put\n * a reasonable default state in place. In the event that a string key is being used\n * to access the state, this will be a object,\n * In the event that a number key is being used this will be an array.\n *\n * @param path the path into the state\n * @param reducer the reducer to apply to the sub section of the state.\n */\nexport function forPath<S, K1 extends keyof S, A extends AnyAction = AnyAction>(\n  path: [CF<K1, A>],\n  reducer: Reducer<S[K1], A>\n): Reducer<S, A>;\n/**\n * Given a path expressed as an array of strings, numbers, or functions, and a reducer\n * returns a reducer which applies the given reducer to the state at the given path.\n *\n * In the event that some part of the state is undefined forPath will try to put\n * a reasonable default state in place. In the event that a string key is being used\n * to access the state, this will be a object,\n * In the event that a number key is being used this will be an array.\n *\n * @param path the path into the state\n * @param reducer the reducer to apply to the sub section of the state.\n */\nexport function forPath<\n  S,\n  K1 extends keyof S,\n  K2 extends keyof S[K1],\n  A extends AnyAction = AnyAction\n>(path: [CF<K1, A>, CF<K2, A>], reducer: Reducer<S[K1][K2], A>): Reducer<S, A>;\n/**\n * Given a path expressed as an array of strings, numbers, or functions, and a reducer\n * returns a reducer which applies the given reducer to the state at the given path.\n *\n * In the event that some part of the state is undefined forPath will try to put\n * a reasonable default state in place. In the event that a string key is being used\n * to access the state, this will be a object,\n * In the event that a number key is being used this will be an array.\n *\n * @param path the path into the state\n * @param reducer the reducer to apply to the sub section of the state.\n */\nexport function forPath<\n  S,\n  K1 extends keyof S,\n  K2 extends keyof S[K1],\n  K3 extends keyof S[K1][K2],\n  A extends AnyAction = AnyAction\n>(path: [CF<K1, A>, CF<K2, A>, CF<K3, A>], reducer: Reducer<S[K1][K2][K3], A>): Reducer<S, A>;\n/**\n * Given a path expressed as an array of strings, numbers, or functions, and a reducer\n * returns a reducer which applies the given reducer to the state at the given path.\n *\n * In the event that some part of the state is undefined forPath will try to put\n * a reasonable default state in place. In the event that a string key is being used\n * to access the state, this will be a object,\n * In the event that a number key is being used this will be an array.\n *\n * @param path the path into the state\n * @param reducer the reducer to apply to the sub section of the state.\n */\nexport function forPath<\n  S,\n  K1 extends keyof S,\n  K2 extends keyof S[K1],\n  K3 extends keyof S[K1][K2],\n  K4 extends keyof S[K1][K2][K3],\n  A extends AnyAction = AnyAction\n>(\n  path: [CF<K1, A>, CF<K2, A>, CF<K3, A>, CF<K4, A>],\n  reducer: Reducer<S[K1][K2][K3][K4], A>\n): Reducer<S, A>;\n/**\n * Given a path expressed as an array of strings, numbers, or functions, and a reducer\n * returns a reducer which applies the given reducer to the state at the given path.\n *\n * In the event that some part of the state is undefined forPath will try to put\n * a reasonable default state in place. In the event that a string key is being used\n * to access the state, this will be a object,\n * In the event that a number key is being used this will be an array.\n *\n * @param path the path into the state\n * @param reducer the reducer to apply to the sub section of the state.\n */\nexport function forPath<\n  S,\n  K1 extends keyof S,\n  K2 extends keyof S[K1],\n  K3 extends keyof S[K1][K2],\n  K4 extends keyof S[K1][K2][K3],\n  K5 extends keyof S[K1][K2][K3][K4],\n  A extends AnyAction = AnyAction\n>(\n  path: [CF<K1, A>, CF<K2, A>, CF<K3, A>, CF<K4, A>, CF<K5, A>],\n  reducer: Reducer<S[K1][K2][K3][K4][K5], A>\n): Reducer<S, A>;\n/**\n * Given a path expressed as an array of strings, numbers, or functions, and a reducer\n * returns a reducer which applies the given reducer to the state at the given path.\n *\n * In the event that some part of the state is undefined forPath will try to put\n * a reasonable default state in place. In the event that a string key is being used\n * to access the state, this will be a object,\n * In the event that a number key is being used this will be an array.\n *\n * @param path the path into the state\n * @param reducer the reducer to apply to the sub section of the state.\n */\nexport function forPath<\n  S,\n  K1 extends keyof S,\n  K2 extends keyof S[K1],\n  K3 extends keyof S[K1][K2],\n  K4 extends keyof S[K1][K2][K3],\n  K5 extends keyof S[K1][K2][K3][K4],\n  K6 extends keyof S[K1][K2][K3][K4][K5],\n  A extends AnyAction = AnyAction\n>(\n  path: [CF<K1, A>, CF<K2, A>, CF<K3, A>, CF<K4, A>, CF<K5, A>, CF<K6, A>],\n  reducer: Reducer<S[K1][K2][K3][K4][K5][K6], A>\n): Reducer<S, A>;\n/**\n * Given a path expressed as an array of strings, numbers, or functions, and a reducer\n * returns a reducer which applies the given reducer to the state at the given path.\n *\n * In the event that some part of the state is undefined forPath will try to put\n * a reasonable default state in place. In the event that a string key is being used\n * to access the state, this will be a object,\n * In the event that a number key is being used this will be an array.\n *\n * @param path the path into the state\n * @param reducer the reducer to apply to the sub section of the state.\n */\nexport function forPath<\n  S,\n  K1 extends keyof S,\n  K2 extends keyof S[K1],\n  K3 extends keyof S[K1][K2],\n  K4 extends keyof S[K1][K2][K3],\n  K5 extends keyof S[K1][K2][K3][K4],\n  K6 extends keyof S[K1][K2][K3][K4][K5],\n  K7 extends keyof S[K1][K2][K3][K4][K5][K6],\n  A extends AnyAction = AnyAction\n>(\n  path: [CF<K1, A>, CF<K2, A>, CF<K3, A>, CF<K4, A>, CF<K5, A>, CF<K6, A>, CF<K7, A>],\n  reducer: Reducer<S[K1][K2][K3][K4][K5][K6][K7], A>\n): Reducer<S, A>;\n/**\n * Given a path expressed as an array of strings, numbers, or functions, and a reducer\n * returns a reducer which applies the given reducer to the state at the given path.\n *\n * In the event that some part of the state is undefined forPath will try to put\n * a reasonable default state in place. In the event that a string key is being used\n * to access the state, this will be a object,\n * In the event that a number key is being used this will be an array.\n *\n * @param path the path into the state\n * @param reducer the reducer to apply to the sub section of the state.\n */\nexport function forPath<\n  S,\n  K1 extends keyof S,\n  K2 extends keyof S[K1],\n  K3 extends keyof S[K1][K2],\n  K4 extends keyof S[K1][K2][K3],\n  K5 extends keyof S[K1][K2][K3][K4],\n  K6 extends keyof S[K1][K2][K3][K4][K5],\n  K7 extends keyof S[K1][K2][K3][K4][K5][K6],\n  K8 extends keyof S[K1][K2][K3][K4][K5][K6][K7],\n  A extends AnyAction = AnyAction\n>(\n  path: [CF<K1, A>, CF<K2, A>, CF<K3, A>, CF<K4, A>, CF<K5, A>, CF<K6, A>, CF<K7, A>, CF<K8, A>],\n  reducer: Reducer<S[K1][K2][K3][K4][K5][K6][K7][K8], A>\n): Reducer<S, A>;\n/**\n * Given a path expressed as an array of strings, numbers, or functions, and a reducer\n * returns a reducer which applies the given reducer to the state at the given path.\n *\n * In the event that some part of the state is undefined forPath will try to put\n * a reasonable default state in place. In the event that a string key is being used\n * to access the state, this will be a object,\n * In the event that a number key is being used this will be an array.\n *\n * @param path the path into the state\n * @param reducer the reducer to apply to the sub section of the state.\n */\nexport function forPath<\n  S,\n  K1 extends keyof S,\n  K2 extends keyof S[K1],\n  K3 extends keyof S[K1][K2],\n  K4 extends keyof S[K1][K2][K3],\n  K5 extends keyof S[K1][K2][K3][K4],\n  K6 extends keyof S[K1][K2][K3][K4][K5],\n  K7 extends keyof S[K1][K2][K3][K4][K5][K6],\n  K8 extends keyof S[K1][K2][K3][K4][K5][K6][K7],\n  K9 extends keyof S[K1][K2][K3][K4][K5][K6][K7][K8],\n  A extends AnyAction = AnyAction\n>(\n  path: [\n    CF<K1, A>,\n    CF<K2, A>,\n    CF<K3, A>,\n    CF<K4, A>,\n    CF<K5, A>,\n    CF<K6, A>,\n    CF<K7, A>,\n    CF<K8, A>,\n    CF<K9, A>\n  ],\n  reducer: Reducer<S[K1][K2][K3][K4][K5][K6][K7][K8][K9], A>\n): Reducer<S, A>;\n/**\n * Given a path expressed as an array of strings, numbers, or functions, and a reducer\n * returns a reducer which applies the given reducer to the state at the given path.\n *\n * In the event that some part of the state is undefined forPath will try to put\n * a reasonable default state in place. In the event that a string key is being used\n * to access the state, this will be a object,\n * In the event that a number key is being used this will be an array.\n *\n * @param path the path into the state\n * @param reducer the reducer to apply to the sub section of the state.\n */\nexport function forPath<\n  S,\n  K1 extends keyof S,\n  K2 extends keyof S[K1],\n  K3 extends keyof S[K1][K2],\n  K4 extends keyof S[K1][K2][K3],\n  K5 extends keyof S[K1][K2][K3][K4],\n  K6 extends keyof S[K1][K2][K3][K4][K5],\n  K7 extends keyof S[K1][K2][K3][K4][K5][K6],\n  K8 extends keyof S[K1][K2][K3][K4][K5][K6][K7],\n  K9 extends keyof S[K1][K2][K3][K4][K5][K6][K7][K8],\n  K10 extends keyof S[K1][K2][K3][K4][K5][K6][K7][K8][K9],\n  A extends AnyAction = AnyAction\n>(\n  path: [\n    CF<K1, A>,\n    CF<K2, A>,\n    CF<K3, A>,\n    CF<K4, A>,\n    CF<K5, A>,\n    CF<K6, A>,\n    CF<K7, A>,\n    CF<K8, A>,\n    CF<K9, A>,\n    CF<K10, A>\n  ],\n  reducer: Reducer<S[K1][K2][K3][K4][K5][K6][K7][K8][K9][K10], A>\n): Reducer<S, A>;\n/**\n * Given a path expressed as an array of strings, numbers, or functions, and a reducer\n * returns a reducer which applies the given reducer to the state at the given path.\n *\n * In the event that some part of the state is undefined forPath will try to put\n * a reasonable default state in place. In the event that a string key is being used\n * to access the state, this will be a object,\n * In the event that a number key is being used this will be an array.\n *\n * @param path the path into the state\n * @param reducer the reducer to apply to the sub section of the state.\n */\nexport function forPath<S, A extends AnyAction = AnyAction>(\n  path: Array<CF<string | number, A>>,\n  reducer: Reducer<unknown, A>\n): Reducer<S, A> {\n  return (state: S | undefined, action: A) => {\n    const pathParts = path.map(part => (typeof part === 'function' ? part(action) : part));\n    const states: unknown[] = [];\n    const subState = pathParts.reduce((s: any, part) => {\n      // handle the case of an undefined state\n      // by creating intermediary state objects\n      if (s === undefined || s === null) {\n        // number keys are arrays, everything else is an object\n        s = typeof part === 'number' ? [] : {};\n      }\n      states.push(s);\n      return s[part];\n    }, state);\n    const v = reducer(subState, action);\n    // if the's no changes\n    // return state as-is\n    if (state !== undefined && v === subState) {\n      return state;\n    }\n    // rebuild the states in reverse order\n    return pathParts.reduceRight((s, part) => {\n      // grab the next intermediate state\n      const n = states.pop();\n      if (Array.isArray(n)) {\n        const p = Number(part);\n        // hanlde cases where we're\n        // putting items past the end of\n        // a smaller array\n        if (n.length < p) {\n          return [...n, ...Array(p - n.length), s];\n        }\n        return [...n.slice(0, p), s, ...n.slice(p + 1)];\n      }\n      return {\n        ...n,\n        [part]: s\n      };\n    }, v) as S;\n  };\n}\n"],"file":"for-path.js"}