"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.forPath = forPath;

/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */

/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */

/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */

/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */

/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */

/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */

/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */

/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */

/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */

/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */

/**
 * Given a path expressed as an array of strings, numbers, or functions, and a reducer
 * returns a reducer which applies the given reducer to the state at the given path.
 *
 * In the event that some part of the state is undefined forPath will try to put
 * a reasonable default state in place. In the event that a string key is being used
 * to access the state, this will be a object,
 * In the event that a number key is being used this will be an array.
 *
 * @param path the path into the state
 * @param reducer the reducer to apply to the sub section of the state.
 */
function forPath(path, reducer) {
  return (state, action) => {
    const pathParts = path.map(part => typeof part === 'function' ? part(action) : part);
    const states = [];
    const subState = pathParts.reduce((s, part) => {
      // handle the case of an undefined state
      // by creating intermediary state objects
      if (s === undefined || s === null) {
        // number keys are arrays, everything else is an object
        s = typeof part === 'number' ? [] : {};
      }

      states.push(s);
      return s[part];
    }, state);
    const v = reducer(subState, action); // if the's no changes
    // return state as-is

    if (state !== undefined && v === subState) {
      return state;
    } // rebuild the states in reverse order


    return pathParts.reduceRight((s, part) => {
      // grab the next intermediate state
      const n = states.pop();

      if (Array.isArray(n)) {
        const p = Number(part); // hanlde cases where we're
        // putting items past the end of
        // a smaller array

        if (n.length < p) {
          return [...n, ...Array(p - n.length), s];
        }

        return [...n.slice(0, p), s, ...n.slice(p + 1)];
      }

      return { ...n,
        [part]: s
      };
    }, v);
  };
}
//# sourceMappingURL=for-path.js.map
