import { AnyAction, Reducer } from './redux';
export declare type ActionPredicate<NA extends A, A extends AnyAction = AnyAction> = ((action: A) => action is NA) | NA['type'];
/**
 * Given a type predicate and a reducer returns a reducer that
 * only invokes the given reducer if the action matches the predicate.
 *
 * Given a string the string is compared to the type field of actions.
 * Given a function the function is passed the action and should return true or false.
 * Given an array of string or functions matches the action if any condition would be met.
 *
 * @param types either a string, function, or array of either
 * @param reducer the reducer to invoke when the type is matched.
 */
export declare const ofType: <S, NA extends A, A extends import("./redux").Action<string> = import("./redux").Action<string>>(types: NA["type"] | ((action: A) => action is NA) | ActionPredicate<NA, A>[], reducer: Reducer<S, NA>) => Reducer<S, A>;
